//Procedural Map using Perlin Noise
#ifndef TILEMAP_H
#define TILEMAP_H

#include "Chunk.h"
#include "FastNoise.h"
#include "Inventory.h"
#include <map>
#include <vector>

class TileMap{
 private:
  FastNoise MapNoise;
  int ChunkLength = 16;
  int MAX_X = 10;
  int MAX_Y = 10;

  Vector2 MinVis,MaxVis;
  std::map<std::string,Item*>* itemTable;

  std::vector<std::vector<Block*>> LoadedBlockList;

  //Round 3
  std::vector<Vector2> ChunkListCoor;
  std::vector<Chunk*> ChunkList;
  
 public:
  TileMap(std::map<std::string,Item*>* itemTable);
  TileMap(float NewSeed, std::map<std::string,Item*>* itemTable);
  
  float GetNoise(int x,int y);
  float getSeed();

  void Index(Vector2 &v);
  
  void setSeed(float seed);
  void GetRanSeed();
  void DrawChunk(Vector2 v);
  void DrawCloseChunks(Vector2 v,int radius);
  //void DrawChunkItems(Vector2 v);
  //void DrawCloseChunksItems(Vector2 v,int radius);
  void ClearMap();

  //New Methods
  void DrawCloseBlocks(Vector2 Center, Vector2 Radius);
  void LoadBlock(Vector2 Loc);
  int KeyIsFound(int Key);
  int RevIndex(int x);
  Block* GetBlock(Vector2 v);
  void DrawVisibleChunks(Vector2 PlayerPos, Vector2 Radius);
  void AddToList(Vector2 v);

  //Im dying
  void UpdateChunkList(Vector2 Center);
  void DrawChunkList();
  void LoadChunkList();
  void UnloadChunkList();

  Vector2 GetChunkCoor(Vector2 Pos);
  
  
};

#endif //TILEMAP_H
